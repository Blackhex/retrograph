stages:
  - build
  - test
  - quality
  - deploy

variables:
  BINARIES_PATH: "build/classes"
  JACOCO_PATH: "build/jacoco/test.exec"
  REPORTS_PATH: "build/reports"

# region Pipeline Definitions

.normalPipeline: &normalPipeline
  tags: [high-performance]
  except:
    refs:
      - schedules
    variables:
      - $GITLAB_USER_NAME == 'svc.jira'

.featureBranchPipeline: &featureBranchPipeline
  tags: [high-performance]
  except:
    refs:
      - master
      - schedules
    variables:
      - $GITLAB_USER_NAME == 'svc.jira'

.postMergePipeline: &postMergePipeline
  <<: *normalPipeline
  only:
    refs:
      - master

# endregion Pipeline Definitions

.default:
  image: jangrewe/gitlab-ci-android

  variables:
    CACHE_DIR: "/builds/mobile/retrograph/cache"
    GRADLE_USER_HOME: "${CACHE_DIR}/gradle"
    GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"

  before_script:
    - echo $CACHE_DIR
    - echo $GRADLE_USER_HOME
    - echo $GRADLE_OPTS
    - mkdir -p $GRADLE_USER_HOME
    - rm -rf gradle.properties
    - echo -e "org.gradle.parallel=true" >> gradle.properties
    - echo -e "org.gradle.daemon=false" >> gradle.properties
    - echo -e "org.gradle.caching=true" >> gradle.properties
    - echo -e "org.gradle.jvmargs=-Xms256m -Xmx4096m" >> gradle.properties
    - cat gradle.properties
    - rm -rf gradle.properties
    - chmod +x ./gradlew
    - du -sh $CACHE_DIR || true
    - du -sh $CACHE_DIR/* || true
    - du -sh $GRADLE_USER_HOME/* || true
    - ./gradlew --stop

  after_script:
    - du -sh $CACHE_DIR || true
    - du -sh $CACHE_DIR/* || true
    - du -sh $GRADLE_USER_HOME/* || true

  cache:
    key: ${CI_PROJECT_ID}
    paths:
      - $CHACHE_DIR

# region SonarQube

.sonarqube:
  image: kiwicom/sonar-scanner:3.2.0

  variables:
    SONAR_ARGUMENTS: "
      -Dsonar.gitlab.comment_no_issue=true
      -Dsonar.gitlab.disable_inline_comments=true
      -Dsonar.gitlab.disable_global_comment=false
      -Dsonar.gitlab.quality_gate_fail_mode=warn
      -Dsonar.import_unknown_files=false
      -Dsonar.java.coveragePlugin=jacoco
      "

  stage: quality

  before_script:
    - export SONAR_SOURCES="src/main" && echo $SONAR_SOURCES
    - export SONAR_TESTS="src/test/" && echo $SONAR_TESTS
    - export SONAR_JAVA_BINARIES="build/classes/java/main/,build/classes/kotlin/main/" && echo $SONAR_JAVA_BINARIES
    - export SONAR_JAVA_TEST_BINARIES="build/classes/java/test/,build/classes/kotlin/test/" && echo $SONAR_JAVA_TEST_BINARIES
    - export SONAR_JAVA_LIBRARIES="libs/" && echo $SONAR_JAVA_LIBRARIES
    - export SONAR_JAVA_TEST_LIBRARIES=$SONAR_JAVA_LIBRARIES && echo $SONAR_JAVA_TEST_LIBRARIES
    - export SONAR_JUNIT_REPORT_PATHS="build/test-results/test/" && echo $SONAR_JUNIT_REPORT_PATHS
    - export SONAR_COVERAGE_JACOCO_XML_REPORT_PATHS="build/reports/jacoco/test/jacocoTestReport.xml" && echo $SONAR_COVERAGE_JACOCO_XML_REPORT_PATHS
    - mkdir -p "build/classes/java/main/" "build/classes/kotlin/main/" "libs/" "build/test-results/test/" "build/reports/jacoco/test/"
    - export SONAR_DYNAMIC_ARGUMENTS="
      -Dsonar.branch.name=$CI_COMMIT_REF_NAME
      -Dsonar.sources=$SONAR_SOURCES
      -Dsonar.tests=$SONAR_TESTS
      -Dsonar.java.binaries=$SONAR_JAVA_BINARIES
      -Dsonar.java.test.binaries=$SONAR_JAVA_TEST_BINARIES
      -Dsonar.java.libraries=$SONAR_JAVA_LIBRARIES
      -Dsonar.java.test.libraries=$SONAR_JAVA_TEST_LIBRARIES
      -Dsonar.junit.reportPaths=$SONAR_JUNIT_REPORT_PATHS
      -Dsonar.coverage.jacoco.xmlReportPaths=$SONAR_COVERAGE_JACOCO_XML_REPORT_PATHS
      " && echo $SONAR_DYNAMIC_ARGUMENTS

  cache: {}

  allow_failure: true

.sonarqube_scan:
  extends: .sonarqube

  script:
    - echo scan $SONAR_SOURCES $SONAR_DYNAMIC_ARGUMENTS $SONAR_ARGUMENTS
    - scan $SONAR_SOURCES $SONAR_DYNAMIC_ARGUMENTS $SONAR_ARGUMENTS

.sonarqube_preview:
  extends: .sonarqube

  script:
    - echo $CI_MERGE_REQUEST_TARGET_BRANCH
    - preview $SONAR_SOURCES $SONAR_DYNAMIC_ARGUMENTS $SONAR_ARGUMENTS
      -Dsonar.analysis.mode=publish
      -Dsonar.branch.target=$CI_MERGE_REQUEST_TARGET_BRANCH

# endregion SonarQube

# region Jobs

assemble:
  extends: .default
  <<: *normalPipeline

  stage: build

  script:
    - ./gradlew assemble

  artifacts:
    name: "${CI_BUILD_NAME}_${CI_BUILD_REF_NAME}"
    paths:
      - $BINARIES_PATH
    expire_in: 1 week

unitTest:
  extends: .default
  <<: *normalPipeline

  stage: test

  script:
    - ./gradlew test jacocoTestReport

  dependencies: [assemble]

  artifacts:
    paths:
      - $BINARIES_PATH
      - $JACOCO_PATH
      - $REPORTS_PATH
    expire_in: 1 week

sonarScannerMaster:
  extends: .sonarqube_scan
  <<: *postMergePipeline

  dependencies: [unitTest]

sonar-scanner-branch:
  extends: .sonarqube_preview
  <<: *featureBranchPipeline

  dependencies: [unitTest]

publish:
  extends: .default
  <<: *postMergePipeline

  stage: deploy

  script:
    - ./gradlew publish

  dependencies: [assemble, unitTest]

  when: manual

# endregion Jobs
