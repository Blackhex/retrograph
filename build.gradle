buildscript {
  apply(from: "$rootDir/dependencies.gradle")
  apply(from: "$rootDir/scripts/deployment.gradle")

  repositories {
    google()
    jcenter()
    kiwi(it)
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    classpath("org.jacoco:org.jacoco.core:$jacocoVersion")
  }
}

apply(plugin: "kotlin")
apply(plugin: "kotlin-kapt")
apply(plugin: "jacoco")
apply(plugin: "maven-publish")

repositories {
  google()
  jcenter()
  kiwi(it)
  maven {
    setUrl("http://dl.bintray.com/jetbrains/spek")
  }
}

dependencies {
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion")
  implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
  implementation("com.squareup.retrofit2:retrofit:$retrofitVersion")
  implementation("com.squareup.retrofit2:converter-gson:$retrofitVersion")
  implementation("com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion")
  implementation("com.squareup.okhttp3:logging-interceptor:$okhttpVersion")
  implementation("com.google.code.gson:gson:$gsonVersion")
  implementation("io.reactivex.rxjava2:rxjava:$rxJavaVersion")

  testImplementation("com.squareup.okhttp3:mockwebserver:$okhttpVersion")

  testImplementation("junit:junit:4.12")
  testImplementation("io.mockk:mockk:$mockkVersion")
  testImplementation("org.assertj:assertj-core:3.10.0")
  testImplementation("com.google.guava:guava:22.0")
}

// Test tasks are never up-to-date.
tasks.withType(Test) {
  outputs.upToDateWhen { false }
}

// region Code Coverage

jacoco {
  toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}

// endregion Code Coverage

// region Deployment

publishLibrary("com.kiwi.mobile", "retrograph", retrographVersion)

// endregion Deployment
